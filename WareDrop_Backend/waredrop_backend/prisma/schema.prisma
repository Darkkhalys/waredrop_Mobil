generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model items {
  item_id       Int            @id(map: "items_pk") @default(autoincrement())
  item_name     String         @db.VarChar(30)
  item_quantity Int
  warehouse_id  Int
  warehouses    warehouses     @relation(fields: [warehouse_id], references: [warehouse_id], map: "warehouse_item_relation")
  transactions  transactions[]
  is_active     Boolean        @default(true)
}

model permissions {
  permission_id       Int                   @id(map: "permissons_pk") @default(autoincrement())
  permission_name     String                @unique(map: "permission_name_uk") @db.VarChar(30)
  role_has_permission role_has_permission[]
}

model role_has_permission {
  permission_permission_id Int
  role_role_id             Int
  permissions              permissions @relation(fields: [permission_permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "relation_7_permisson_fk")
  roles                    roles       @relation(fields: [role_role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "relation_7_role_fk")

  @@id([permission_permission_id, role_role_id], map: "relation_7_pk")
}

model roles {
  role_id             Int                   @id(map: "roles_pk") @default(autoincrement())
  role_name           String                @unique(map: "role_name_uk") @db.VarChar(30)
  role_has_permission role_has_permission[]
  user_has_role       user_has_role[]
}

model transactions {
  trans_id           Int       @id(map: "transactions_pk") @default(autoincrement())
  trans_post_date    DateTime
  trans_arrived_date DateTime?
  trans_origin_id    Int
  trans_target_id    Int
  item_item_id       Int
  worker_email       String?   @db.VarChar(50)
  items              items     @relation(fields: [item_item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_item_fk")
}

model user_has_role {
  role_role_id Int
  user_user_id Int
  roles        roles @relation(fields: [role_role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "relation_6_role_fk")
  users        users @relation(fields: [user_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "relation_6_user_fk")

  @@id([role_role_id, user_user_id], map: "relation_6_pk")
}

model users {
  user_id       Int             @id(map: "users_pk") @default(autoincrement())
  user_name     String          @db.VarChar(30)
  user_email    String          @unique(map: "user_email_uk") @db.VarChar(50)
  user_password String          @db.VarChar(500)
  user_has_role user_has_role[]
  warehouses    warehouses[]
}

model warehouses {
  warehouse_id     Int     @id(map: "warehouses_pk") @default(autoincrement())
  warehouse_name   String  @unique(map: "warehouse_name_uk") @db.VarChar(30)
  location         String  @db.VarChar(30)
  assigned_user_id Int?
  items            items[]
  users            users?  @relation(fields: [assigned_user_id], references: [user_id], map: "assign_user_relation")
  is_active        Boolean @default(true)
}
